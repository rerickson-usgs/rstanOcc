// Generated by rstantools.  Do not edit by hand.

/*
    rstanOcc is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rstanOcc is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rstanOcc.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_occupancyBernoulli_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_occupancyBernoulli");
    reader.add_event(57, 55, "end", "model_occupancyBernoulli");
    return reader;
}
#include <stan_meta_header.hpp>
class model_occupancyBernoulli : public prob_grad {
private:
        int nSites;
        int nPsiCoef;
        matrix_d Xpsi;
        int totalSurveys;
        int nPCoef;
        matrix_d Vp;
        std::vector<int> site;
        std::vector<int> y;
        std::vector<int> startIndex;
        std::vector<int> endIndex;
        std::vector<int> z;
        std::vector<int> nSurveys;
public:
    model_occupancyBernoulli(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_occupancyBernoulli(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_occupancyBernoulli_namespace::model_occupancyBernoulli";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "nSites", "int", context__.to_vec());
            nSites = int(0);
            vals_i__ = context__.vals_i("nSites");
            pos__ = 0;
            nSites = vals_i__[pos__++];
            check_greater_or_equal(function__, "nSites", nSites, 1);
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "nPsiCoef", "int", context__.to_vec());
            nPsiCoef = int(0);
            vals_i__ = context__.vals_i("nPsiCoef");
            pos__ = 0;
            nPsiCoef = vals_i__[pos__++];
            check_greater_or_equal(function__, "nPsiCoef", nPsiCoef, 1);
            current_statement_begin__ = 5;
            validate_non_negative_index("Xpsi", "nSites", nSites);
            validate_non_negative_index("Xpsi", "nPsiCoef", nPsiCoef);
            context__.validate_dims("data initialization", "Xpsi", "matrix_d", context__.to_vec(nSites,nPsiCoef));
            Xpsi = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(nSites, nPsiCoef);
            vals_r__ = context__.vals_r("Xpsi");
            pos__ = 0;
            size_t Xpsi_j_2_max__ = nPsiCoef;
            size_t Xpsi_j_1_max__ = nSites;
            for (size_t j_2__ = 0; j_2__ < Xpsi_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Xpsi_j_1_max__; ++j_1__) {
                    Xpsi(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "totalSurveys", "int", context__.to_vec());
            totalSurveys = int(0);
            vals_i__ = context__.vals_i("totalSurveys");
            pos__ = 0;
            totalSurveys = vals_i__[pos__++];
            check_greater_or_equal(function__, "totalSurveys", totalSurveys, 1);
            current_statement_begin__ = 9;
            context__.validate_dims("data initialization", "nPCoef", "int", context__.to_vec());
            nPCoef = int(0);
            vals_i__ = context__.vals_i("nPCoef");
            pos__ = 0;
            nPCoef = vals_i__[pos__++];
            check_greater_or_equal(function__, "nPCoef", nPCoef, 1);
            current_statement_begin__ = 10;
            validate_non_negative_index("Vp", "totalSurveys", totalSurveys);
            validate_non_negative_index("Vp", "nPCoef", nPCoef);
            context__.validate_dims("data initialization", "Vp", "matrix_d", context__.to_vec(totalSurveys,nPCoef));
            Vp = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(totalSurveys, nPCoef);
            vals_r__ = context__.vals_r("Vp");
            pos__ = 0;
            size_t Vp_j_2_max__ = nPCoef;
            size_t Vp_j_1_max__ = totalSurveys;
            for (size_t j_2__ = 0; j_2__ < Vp_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Vp_j_1_max__; ++j_1__) {
                    Vp(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 13;
            validate_non_negative_index("site", "totalSurveys", totalSurveys);
            context__.validate_dims("data initialization", "site", "int", context__.to_vec(totalSurveys));
            site = std::vector<int>(totalSurveys, int(0));
            vals_i__ = context__.vals_i("site");
            pos__ = 0;
            size_t site_k_0_max__ = totalSurveys;
            for (size_t k_0__ = 0; k_0__ < site_k_0_max__; ++k_0__) {
                site[k_0__] = vals_i__[pos__++];
            }
            size_t site_i_0_max__ = totalSurveys;
            for (size_t i_0__ = 0; i_0__ < site_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "site[i_0__]", site[i_0__], 1);
                check_less_or_equal(function__, "site[i_0__]", site[i_0__], nSites);
            }
            current_statement_begin__ = 14;
            validate_non_negative_index("y", "totalSurveys", totalSurveys);
            context__.validate_dims("data initialization", "y", "int", context__.to_vec(totalSurveys));
            y = std::vector<int>(totalSurveys, int(0));
            vals_i__ = context__.vals_i("y");
            pos__ = 0;
            size_t y_k_0_max__ = totalSurveys;
            for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                y[k_0__] = vals_i__[pos__++];
            }
            size_t y_i_0_max__ = totalSurveys;
            for (size_t i_0__ = 0; i_0__ < y_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "y[i_0__]", y[i_0__], 0);
                check_less_or_equal(function__, "y[i_0__]", y[i_0__], 1);
            }
            current_statement_begin__ = 15;
            validate_non_negative_index("startIndex", "nSites", nSites);
            context__.validate_dims("data initialization", "startIndex", "int", context__.to_vec(nSites));
            startIndex = std::vector<int>(nSites, int(0));
            vals_i__ = context__.vals_i("startIndex");
            pos__ = 0;
            size_t startIndex_k_0_max__ = nSites;
            for (size_t k_0__ = 0; k_0__ < startIndex_k_0_max__; ++k_0__) {
                startIndex[k_0__] = vals_i__[pos__++];
            }
            size_t startIndex_i_0_max__ = nSites;
            for (size_t i_0__ = 0; i_0__ < startIndex_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "startIndex[i_0__]", startIndex[i_0__], 0);
                check_less_or_equal(function__, "startIndex[i_0__]", startIndex[i_0__], totalSurveys);
            }
            current_statement_begin__ = 16;
            validate_non_negative_index("endIndex", "nSites", nSites);
            context__.validate_dims("data initialization", "endIndex", "int", context__.to_vec(nSites));
            endIndex = std::vector<int>(nSites, int(0));
            vals_i__ = context__.vals_i("endIndex");
            pos__ = 0;
            size_t endIndex_k_0_max__ = nSites;
            for (size_t k_0__ = 0; k_0__ < endIndex_k_0_max__; ++k_0__) {
                endIndex[k_0__] = vals_i__[pos__++];
            }
            size_t endIndex_i_0_max__ = nSites;
            for (size_t i_0__ = 0; i_0__ < endIndex_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "endIndex[i_0__]", endIndex[i_0__], 0);
                check_less_or_equal(function__, "endIndex[i_0__]", endIndex[i_0__], totalSurveys);
            }
            current_statement_begin__ = 19;
            validate_non_negative_index("z", "nSites", nSites);
            context__.validate_dims("data initialization", "z", "int", context__.to_vec(nSites));
            z = std::vector<int>(nSites, int(0));
            vals_i__ = context__.vals_i("z");
            pos__ = 0;
            size_t z_k_0_max__ = nSites;
            for (size_t k_0__ = 0; k_0__ < z_k_0_max__; ++k_0__) {
                z[k_0__] = vals_i__[pos__++];
            }
            size_t z_i_0_max__ = nSites;
            for (size_t i_0__ = 0; i_0__ < z_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "z[i_0__]", z[i_0__], 0);
                check_less_or_equal(function__, "z[i_0__]", z[i_0__], 1);
            }
            current_statement_begin__ = 22;
            validate_non_negative_index("nSurveys", "nSites", nSites);
            context__.validate_dims("data initialization", "nSurveys", "int", context__.to_vec(nSites));
            nSurveys = std::vector<int>(nSites, int(0));
            vals_i__ = context__.vals_i("nSurveys");
            pos__ = 0;
            size_t nSurveys_k_0_max__ = nSites;
            for (size_t k_0__ = 0; k_0__ < nSurveys_k_0_max__; ++k_0__) {
                nSurveys[k_0__] = vals_i__[pos__++];
            }
            size_t nSurveys_i_0_max__ = nSites;
            for (size_t i_0__ = 0; i_0__ < nSurveys_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "nSurveys[i_0__]", nSurveys[i_0__], 0);
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 25;
            validate_non_negative_index("beta_psi", "nPsiCoef", nPsiCoef);
            num_params_r__ += nPsiCoef;
            current_statement_begin__ = 26;
            validate_non_negative_index("beta_p", "nPCoef", nPCoef);
            num_params_r__ += nPCoef;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_occupancyBernoulli() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 25;
        if (!(context__.contains_r("beta_psi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_psi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_psi");
        pos__ = 0U;
        validate_non_negative_index("beta_psi", "nPsiCoef", nPsiCoef);
        context__.validate_dims("parameter initialization", "beta_psi", "vector_d", context__.to_vec(nPsiCoef));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_psi(nPsiCoef);
        size_t beta_psi_j_1_max__ = nPsiCoef;
        for (size_t j_1__ = 0; j_1__ < beta_psi_j_1_max__; ++j_1__) {
            beta_psi(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta_psi);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_psi: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 26;
        if (!(context__.contains_r("beta_p")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_p missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_p");
        pos__ = 0U;
        validate_non_negative_index("beta_p", "nPCoef", nPCoef);
        context__.validate_dims("parameter initialization", "beta_p", "vector_d", context__.to_vec(nPCoef));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_p(nPCoef);
        size_t beta_p_j_1_max__ = nPCoef;
        for (size_t j_1__ = 0; j_1__ < beta_p_j_1_max__; ++j_1__) {
            beta_p(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta_p);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_p: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 25;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta_psi;
            (void) beta_psi;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_psi = in__.vector_constrain(nPsiCoef, lp__);
            else
                beta_psi = in__.vector_constrain(nPsiCoef);
            current_statement_begin__ = 26;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta_p;
            (void) beta_p;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_p = in__.vector_constrain(nPCoef, lp__);
            else
                beta_p = in__.vector_constrain(nPCoef);
            // transformed parameters
            current_statement_begin__ = 29;
            validate_non_negative_index("logit_p", "totalSurveys", totalSurveys);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> logit_p(totalSurveys);
            stan::math::initialize(logit_p, DUMMY_VAR__);
            stan::math::fill(logit_p, DUMMY_VAR__);
            stan::math::assign(logit_p,multiply(Vp, beta_p));
            current_statement_begin__ = 30;
            validate_non_negative_index("logit_psi", "nSites", nSites);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> logit_psi(nSites);
            stan::math::initialize(logit_psi, DUMMY_VAR__);
            stan::math::fill(logit_psi, DUMMY_VAR__);
            stan::math::assign(logit_psi,multiply(Xpsi, beta_psi));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 29;
            size_t logit_p_j_1_max__ = totalSurveys;
            for (size_t j_1__ = 0; j_1__ < logit_p_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(logit_p(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: logit_p" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable logit_p: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 30;
            size_t logit_psi_j_1_max__ = nSites;
            for (size_t j_1__ = 0; j_1__ < logit_psi_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(logit_psi(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: logit_psi" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable logit_psi: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            {
            current_statement_begin__ = 33;
            validate_non_negative_index("log_psi", "nSites", nSites);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_psi(nSites);
            stan::math::initialize(log_psi, DUMMY_VAR__);
            stan::math::fill(log_psi, DUMMY_VAR__);
            stan::math::assign(log_psi,log_inv_logit(logit_psi));
            current_statement_begin__ = 34;
            validate_non_negative_index("log1m_psi", "nSites", nSites);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log1m_psi(nSites);
            stan::math::initialize(log1m_psi, DUMMY_VAR__);
            stan::math::fill(log1m_psi, DUMMY_VAR__);
            stan::math::assign(log1m_psi,log1m_inv_logit(logit_psi));
            current_statement_begin__ = 36;
            lp_accum__.add(normal_log<propto__>(beta_psi, 0, 1));
            current_statement_begin__ = 37;
            lp_accum__.add(normal_log<propto__>(beta_p, 0, 1));
            current_statement_begin__ = 38;
            for (int i = 1; i <= nSites; ++i) {
                current_statement_begin__ = 39;
                if (as_bool(logical_gt(get_base1(nSurveys, i, "nSurveys", 1), 0))) {
                    current_statement_begin__ = 40;
                    if (as_bool(logical_gt(get_base1(z, i, "z", 1), 0))) {
                        current_statement_begin__ = 42;
                        lp_accum__.add((get_base1(log_psi, i, "log_psi", 1) + bernoulli_logit_log(stan::model::rvalue(y, stan::model::cons_list(stan::model::index_min_max(get_base1(startIndex, i, "startIndex", 1), get_base1(endIndex, i, "endIndex", 1)), stan::model::nil_index_list()), "y"), stan::model::rvalue(logit_p, stan::model::cons_list(stan::model::index_min_max(get_base1(startIndex, i, "startIndex", 1), get_base1(endIndex, i, "endIndex", 1)), stan::model::nil_index_list()), "logit_p"))));
                    } else {
                        current_statement_begin__ = 47;
                        lp_accum__.add(log_sum_exp((get_base1(log_psi, i, "log_psi", 1) + bernoulli_logit_log(stan::model::rvalue(y, stan::model::cons_list(stan::model::index_min_max(get_base1(startIndex, i, "startIndex", 1), get_base1(endIndex, i, "endIndex", 1)), stan::model::nil_index_list()), "y"), stan::model::rvalue(logit_p, stan::model::cons_list(stan::model::index_min_max(get_base1(startIndex, i, "startIndex", 1), get_base1(endIndex, i, "endIndex", 1)), stan::model::nil_index_list()), "logit_p"))), get_base1(log1m_psi, i, "log1m_psi", 1)));
                    }
                }
            }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta_psi");
        names__.push_back("beta_p");
        names__.push_back("logit_p");
        names__.push_back("logit_psi");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(nPsiCoef);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nPCoef);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(totalSurveys);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nSites);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_occupancyBernoulli_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_psi = in__.vector_constrain(nPsiCoef);
        size_t beta_psi_j_1_max__ = nPsiCoef;
        for (size_t j_1__ = 0; j_1__ < beta_psi_j_1_max__; ++j_1__) {
            vars__.push_back(beta_psi(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_p = in__.vector_constrain(nPCoef);
        size_t beta_p_j_1_max__ = nPCoef;
        for (size_t j_1__ = 0; j_1__ < beta_p_j_1_max__; ++j_1__) {
            vars__.push_back(beta_p(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 29;
            validate_non_negative_index("logit_p", "totalSurveys", totalSurveys);
            Eigen::Matrix<double, Eigen::Dynamic, 1> logit_p(totalSurveys);
            stan::math::initialize(logit_p, DUMMY_VAR__);
            stan::math::fill(logit_p, DUMMY_VAR__);
            stan::math::assign(logit_p,multiply(Vp, beta_p));
            current_statement_begin__ = 30;
            validate_non_negative_index("logit_psi", "nSites", nSites);
            Eigen::Matrix<double, Eigen::Dynamic, 1> logit_psi(nSites);
            stan::math::initialize(logit_psi, DUMMY_VAR__);
            stan::math::fill(logit_psi, DUMMY_VAR__);
            stan::math::assign(logit_psi,multiply(Xpsi, beta_psi));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t logit_p_j_1_max__ = totalSurveys;
                for (size_t j_1__ = 0; j_1__ < logit_p_j_1_max__; ++j_1__) {
                    vars__.push_back(logit_p(j_1__));
                }
                size_t logit_psi_j_1_max__ = nSites;
                for (size_t j_1__ = 0; j_1__ < logit_psi_j_1_max__; ++j_1__) {
                    vars__.push_back(logit_psi(j_1__));
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_occupancyBernoulli";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_psi_j_1_max__ = nPsiCoef;
        for (size_t j_1__ = 0; j_1__ < beta_psi_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_psi" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_p_j_1_max__ = nPCoef;
        for (size_t j_1__ = 0; j_1__ < beta_p_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_p" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t logit_p_j_1_max__ = totalSurveys;
            for (size_t j_1__ = 0; j_1__ < logit_p_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "logit_p" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t logit_psi_j_1_max__ = nSites;
            for (size_t j_1__ = 0; j_1__ < logit_psi_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "logit_psi" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_psi_j_1_max__ = nPsiCoef;
        for (size_t j_1__ = 0; j_1__ < beta_psi_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_psi" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_p_j_1_max__ = nPCoef;
        for (size_t j_1__ = 0; j_1__ < beta_p_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_p" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t logit_p_j_1_max__ = totalSurveys;
            for (size_t j_1__ = 0; j_1__ < logit_p_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "logit_p" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t logit_psi_j_1_max__ = nSites;
            for (size_t j_1__ = 0; j_1__ < logit_psi_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "logit_psi" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_occupancyBernoulli_namespace::model_occupancyBernoulli stan_model;
#endif
